on: workflow_dispatch
name: Test release creation

jobs:
  build:
    name: Test uploading release asset
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build project # This would actually build your project, using zip for an example artifact
        run: |
          RELEASE_DATE=$( date +%Y%m%d%H%M )
          echo "RELEASE_DATE=${RELEASE_DATE}" >>${GITHUB_ENV}
          mkdir -p dist/build-${RELEASE_DATE}
          echo "humba" >dist/build-${RELEASE_DATE}/build-${RELEASE_DATE}.tar.gz
          echo "trala" >dist/build-${RELEASE_DATE}/trala/release-notes.txt
          echo "SIMPLE_VERSION_INFO=$( basename dist/* )" >>${GITHUB_ENV}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.SIMPLE_VERSION_INFO }}
          release_name: ${{ env.SIMPLE_VERSION_INFO }}
          draft: false
          prerelease: false
      - name: Upload Release Asset tar.gz
        id: upload-release-asset-tar-gz
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./dist/${{ env.SIMPLE_VERSION_INFO }}/${{ env.SIMPLE_VERSION_INFO }}.tar.gz
          asset_name: ${{ env.SIMPLE_VERSION_INFO }}.tar.gz
          asset_content_type: application/x-tar
      - name: Upload Release Asset release_notes.txt
        id: upload-release-asset-release-notes-txt
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./dist/${{ env.SIMPLE_VERSION_INFO }}/release-notes.txt
          asset_name: release-notes.txt
          asset_content_type: text/plain
