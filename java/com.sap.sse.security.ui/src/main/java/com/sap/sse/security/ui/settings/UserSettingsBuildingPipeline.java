package com.sap.sse.security.ui.settings;

import com.sap.sse.common.settings.Settings;
import com.sap.sse.common.settings.generic.support.SettingsUtil;
import com.sap.sse.gwt.client.shared.settings.SettingsRepresentationTransformer;
import com.sap.sse.gwt.client.shared.settings.StorableRepresentationOfDocumentAndUserSettings;
import com.sap.sse.gwt.client.shared.settings.StorableSettingsRepresentation;

/**
 * Settings building pipeline which is capable of building settings considering System Default Settings, stored
 * representations of User Settings and Document Settings, and current URL. The precedence of settings layers is:
 * <ul>
 * <li>System Default Settings</li>
 * <li>User Settings</li>
 * <li>Document Settings</li>
 * <li>URL Settings</li>
 * </ul>
 * 
 * @author Vladislav Chumak
 *
 */
public class UserSettingsBuildingPipeline extends UrlSettingsBuildingPipeline {

    /**
     * Constructs an instance with a custom conversion helper between settings objects and its storable representation.
     * 
     * @param settingsRepresentationTransformer
     *            The custom conversion helper
     */
    public UserSettingsBuildingPipeline(SettingsRepresentationTransformer settingsRepresentationTransformer) {
        super(settingsRepresentationTransformer);
    }

    /**
     * Constructs the settings object of the root perspective/component by means of provided
     * {@code systemDefaultSettings} and stored representation of all settings. This method implements the settings
     * construction pipeline for a settings object which is used for settings loading operations. The settings object is
     * constructed on top of provided systemdDefaultSettings considering settings layers in the following order:
     * <ul>
     * <li>User Settings</li>
     * <li>Document Settings</li>
     * <li>URL Settings</li>
     * </ul>
     * 
     * @param systemDefaultSettings
     *            The basic settings to be used
     * @param settingsRepresentation
     *            The stored representations of User Settings and Document Settings
     * @return The constructed settings object
     */
    @Override
    public <CS extends Settings> CS getSettingsObject(CS systemDefaultSettings,
            StorableRepresentationOfDocumentAndUserSettings settingsRepresentation) {
        CS effectiveSettings = systemDefaultSettings;
        if (settingsRepresentation.hasStoredUserSettings()) {
            effectiveSettings = settingsRepresentationTransformer.mergeSettingsObjectWithStorableRepresentation(
                    effectiveSettings, settingsRepresentation.getUserSettingsRepresentation());
        }
        if (settingsRepresentation.hasStoredDocumentSettings()) {
            effectiveSettings = settingsRepresentationTransformer.mergeSettingsObjectWithStorableRepresentation(
                    effectiveSettings, settingsRepresentation.getDocumentSettingsRepresentation());
        }
        effectiveSettings = settingsRepresentationTransformer.mergeSettingsObjectWithUrlSettings(effectiveSettings);
        return effectiveSettings;
    }

    /**
     * Converts the provided settings according to storable settings representation for User Settings. This method
     * implements the storable settings representation building pipeline which is used for settings storing operations.
     * The diff patch inside the returned settings representation is generated by diff between {@code defaultValues} and
     * {@code values} inside the provided {@code newSettings} object.
     * 
     * @param newSettings
     *            The settings to convert to storable representation
     * @param newInstance
     *            A fresh dummy instance of the settings type which will be used as temporary helper (defaultValues are
     *            required, if used for layer patching, values are completely ignored)
     * @param previousSettingsRepresentation
     *            The representation of settings which have been already stored (the whole settings tree)
     * @param path
     *            The settings tree path of provided settings (empty lists means the provided settings belong to the
     *            root component/perspective)
     * @return The storable settings representation of provided settings as User Settings
     */
    @Override
    public <CS extends Settings> StorableSettingsRepresentation getStorableRepresentationOfUserSettings(CS newSettings,
            CS newInstance, Iterable<String> path) {
        return settingsRepresentationTransformer.convertToSettingsRepresentation(newSettings);
    }

    /**
     * Converts the provided settings according to storable settings representation for Document Settings. This method
     * implements the storable settings representation building pipeline which is used for settings storing operations.
     * The diff patch inside the returned settings representation is generated by diff between {@code values} of User
     * Settings from provided {@code previousSettingsRepresentation} and {@code values} inside the provided
     * {@code newSettings} object.
     * 
     * @param newSettings
     *            The settings to convert to storable representation
     * @param newInstance
     *            A fresh dummy instance of the settings type which will be used as temporary helper (defaultValues are
     *            required, if used for layer patching, values are completely ignored)
     * @param previousSettingsRepresentation
     *            The representation of settings which have been already stored (the whole settings tree)
     * @param path
     *            The settings tree path of provided settings (empty lists means the provided settings belong to the
     *            root component/perspective)
     * @return The storable settings representation of provided settings as Document Settings
     */
    @Override
    public <CS extends Settings> StorableSettingsRepresentation getStorableRepresentationOfDocumentSettings(
            CS newSettings, CS newInstance,
            StorableRepresentationOfDocumentAndUserSettings previousSettingsRepresentation, Iterable<String> path){
        CS pipelinedSettings = newInstance;

        if (previousSettingsRepresentation.hasStoredUserSettings()) {
            pipelinedSettings = settingsRepresentationTransformer.mergeSettingsObjectWithStorableRepresentation(
                    pipelinedSettings,
                    previousSettingsRepresentation.getUserSettingsRepresentation().getSubSettingsRepresentation(path));

            pipelinedSettings = SettingsUtil.copyDefaultsFromValues(pipelinedSettings, pipelinedSettings);
        }
        pipelinedSettings = SettingsUtil.copyValues(newSettings, pipelinedSettings);
        return settingsRepresentationTransformer.convertToSettingsRepresentation(pipelinedSettings);
    }

}
