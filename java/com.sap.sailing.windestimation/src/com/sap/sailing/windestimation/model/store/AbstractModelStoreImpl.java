package com.sap.sailing.windestimation.model.store;

import com.sap.sailing.windestimation.model.ModelContext;
import com.sap.sailing.windestimation.model.exception.ModelPersistenceException;

/**
 * Base class for {@link ModelStore} implementation which contains common strategies for persistence key derivation and
 * util methods.
 * 
 * @author Vladislav Chumak (D069712)
 *
 */
public abstract class AbstractModelStoreImpl implements ModelStore {

    /**
     * Persistence key parts are separated by this delimiter.
     */
    private static final String NAME_PART_DELIMITER = ".";

    /**
     * Prefix used for all persistence keys.
     */
    protected static final String CONTEXT_NAME_PREFIX = "modelFor";

    /**
     * Suffix of all persistence keys.
     */
    protected static final String PERSISTENCE_KEY_SUFFIX = ".clf";

    /**
     * Checks that the provided model supports a serialization strategy which implies that it can be persisted. If so,
     * the serialization strategy of the model is returned, otherwise an exception is thrown.
     * 
     * @param trainedModel
     *            The serialization strategy of this model will be checked/returned.
     * @return Serialization strategy of the provided model.
     * @throws ModelPersistenceException
     *             If the model does not support serialization/persistence.
     */
    protected <T extends PersistableModel<?, ?>> ModelSerializationStrategy checkAndGetModelSerializationStrategy(
            T trainedModel) throws ModelPersistenceException {
        ModelSerializationStrategy modelSerializationStrategy = trainedModel.getPersistenceSupportType()
                .getModelSerializationStrategy();
        if (modelSerializationStrategy == null) {
            throw new ModelPersistenceException(
                    "Model of type " + trainedModel.getClass().getSimpleName() + " has no serialization strategy");
        }
        return modelSerializationStrategy;
    }

    /**
     * Gets the persistence key for the provided model. The persistence key is used as an unique identifier for the
     * provided model. The unique identifier can be considered either as a filename, or as id attribute within a
     * database. This method is idempotent.
     * 
     * @param persistableModel
     *            The model for which the persisted key will be derived
     * @return Persistence key for the provided model
     */
    protected String getPersistenceKey(PersistableModel<?, ?> persistableModel) {
        StringBuilder fileName = new StringBuilder();
        fileName.append(getPersistenceKeyPartOfModelSerializationType(persistableModel.getPersistenceSupportType()));
        ModelDomainType domainType = persistableModel.getModelContext().getDomainType();
        fileName.append(getPersistenceKeyPartOfModelDomain(domainType));
        fileName.append(persistableModel.getClass().getSimpleName());
        fileName.append(NAME_PART_DELIMITER);
        fileName.append(persistableModel.getModelContext().getId());
        fileName.append(PERSISTENCE_KEY_SUFFIX);
        String finalFileName = replaceSystemChars(fileName.toString());
        return finalFileName;
    }

    /**
     * Replaces problematic characters of provided string with doubled underscore.
     */
    private String replaceSystemChars(String str) {
        return str.replaceAll("[\\\\\\/\\\"\\:\\|\\<\\>\\*\\?]", "__");
    }

    protected String getPersistenceKeyPartOfModelDomain(ModelDomainType modelDomainType) {
        return CONTEXT_NAME_PREFIX + modelDomainType.getDomainName() + NAME_PART_DELIMITER;
    }

    /**
     * Gets the string representation of the provided model serialization strategy.
     */
    protected String getPersistenceKeyPartOfModelSerializationType(
            ModelSerializationStrategyType modelSerializationStrategyType) {
        return modelSerializationStrategyType.name() + NAME_PART_DELIMITER;
    }

    /**
     * Gets the model serialization strategy from the provided persistence key. This is possible, because the id of the
     * serialization strategy is included into persistence key generated by
     * {@link #getPersistenceKey(PersistableModel)}. If no strategy could be determined (which is illegal), {@code null}
     * is returned.
     */
    protected ModelSerializationStrategy getModelSerializationStrategyFromPersistenceKey(String persistenceKey) {
        for (ModelSerializationStrategyType serializationType : ModelSerializationStrategyType.values()) {
            if (serializationType != ModelSerializationStrategyType.NONE
                    && persistenceKey.startsWith(getPersistenceKeyPartOfModelSerializationType(serializationType))) {
                return serializationType.getModelSerializationStrategy();
            }
        }
        return null;
    }

    /**
     * Checks whether the provided persistence key belongs to the provided domain type. This is possible, because the
     * domain type is included into persistence key generated by {@link #getPersistenceKey(PersistableModel)}.
     */
    protected boolean isPersistenceKeyBelongingToModelDomain(String persistenceKey, ModelDomainType modelDomainType) {
        return persistenceKey.endsWith(PERSISTENCE_KEY_SUFFIX)
                && persistenceKey.substring(persistenceKey.indexOf(NAME_PART_DELIMITER))
                        .startsWith(NAME_PART_DELIMITER + getPersistenceKeyPartOfModelDomain(modelDomainType));
    }

    /**
     * Ensures that the loaded context equals to requested model context.
     * 
     * @param requestedModelContext
     *            The model context of request model.
     * @param loadedModelContext
     *            The model context of the model which was loaded.
     * @throws ModelPersistenceException
     *             Thrown if requested model context does not equal to the loaded model context.
     */
    protected <InstanceType> void verifyRequestedModelContextIsLoaded(ModelContext<?> requestedModelContext,
            ModelContext<InstanceType> loadedModelContext) throws ModelPersistenceException {
        if (!requestedModelContext.equals(loadedModelContext)) {
            throw new ModelPersistenceException("The context of the loaded model is: " + loadedModelContext
                    + ". \nExpected: " + requestedModelContext);
        }
    }

}
