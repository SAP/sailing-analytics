package com.sap.sailing.domain.common;

import static com.sap.sailing.domain.common.SortingOrder.ASCENDING;
import static com.sap.sailing.domain.common.SortingOrder.DESCENDING;
import static com.sap.sailing.domain.common.SortingOrder.NONE;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

/**
 * Identifies details that can be requested from the racing service. Optionally, the details can specify a precision
 * as the number of decimal digits in which they are usually provided and should be formatted.
 * Additionally a default sorting order can be specified which can be used for table oriented views.
 * 
 * @author Axel Uhl (d043530)
 *
 */
public enum DetailType implements Serializable {
    DISTANCE_TRAVELED(0, ASCENDING), DISTANCE_TRAVELED_INCLUDING_GATE_START(0, ASCENDING),
    AVERAGE_SPEED_OVER_GROUND_IN_KNOTS(2, DESCENDING), RACE_RANK(0, ASCENDING), REGATTA_RANK(0, ASCENDING), OVERALL_RANK(0, ASCENDING),
    RANK_GAIN(0, ASCENDING),
    NUMBER_OF_MANEUVERS(0, ASCENDING),
    CURRENT_SPEED_OVER_GROUND_IN_KNOTS(2,DESCENDING),
    CURRENT_HEEL_IN_DEGREES(2,DESCENDING),
    CURRENT_PITCH_IN_DEGREES(2,DESCENDING),
    CURRENT_RIDE_HEIGHT_IN_METERS(2,DESCENDING),
    CURRENT_DISTANCE_FOILED_IN_METERS(0, DESCENDING),
    CURRENT_DURATION_FOILED_IN_SECONDS(0, DESCENDING),
    CURRENT_PORT_DAGGERBOARD_RAKE(2,DESCENDING),
    CURRENT_STBD_DAGGERBOARD_RAKE(2,DESCENDING),
    CURRENT_PORT_RUDDER_RAKE(2,DESCENDING),
    CURRENT_STBD_RUDDER_RAKE(2,DESCENDING),
    CURRENT_MAST_ROTATION_IN_DEGREES(2,DESCENDING),
    CURRENT_LEEWAY_IN_DEGREES(1, ASCENDING),
    CURRENT_SET(1, ASCENDING),
    CURRENT_DRIFT_IN_DEGREES(1, ASCENDING),
    CURRENT_DEPTH_IN_METERS(1, ASCENDING),
    CURRENT_RUDDER_IN_DEGREES(2, ASCENDING),
    CURRENT_TACK_ANGLE_IN_DEGREES(2, ASCENDING),
    CURRENT_DEFLECTOR_PERCENTAGE(2, ASCENDING),
    CURRENT_DEFLECTOR_IN_MILLIMETERS(2, ASCENDING),
    CURRENT_RAKE_IN_DEGREES(2, ASCENDING),
    CURRENT_TARGET_HEEL_ANGLE_IN_DEGREES(2, ASCENDING),
    CURRENT_FORESTAY_LOAD(2, ASCENDING),
    CURRENT_FORESTAY_PRESSURE(2, ASCENDING),
    CURRENT_TARGET_BOATSPEED_PERCENTAGE(2, ASCENDING),
    ESTIMATED_TIME_TO_NEXT_WAYPOINT_IN_SECONDS(1, ASCENDING), VELOCITY_MADE_GOOD_IN_KNOTS(2, DESCENDING),
    GAP_TO_LEADER_IN_SECONDS(0, ASCENDING), GAP_CHANGE_SINCE_LEG_START_IN_SECONDS(0, ASCENDING),
    SIDE_TO_WHICH_MARK_AT_LEG_START_WAS_ROUNDED(0, ASCENDING), WINDWARD_DISTANCE_TO_GO_IN_METERS(0, ASCENDING),
    AVERAGE_ABSOLUTE_CROSS_TRACK_ERROR_IN_METERS(0, ASCENDING), AVERAGE_SIGNED_CROSS_TRACK_ERROR_IN_METERS(0, ASCENDING), RACE_DISTANCE_TRAVELED(0, ASCENDING),
    RACE_DISTANCE_TRAVELED_INCLUDING_GATE_START(0, ASCENDING),
    RACE_AVERAGE_SPEED_OVER_GROUND_IN_KNOTS(2, DESCENDING), RACE_GAP_TO_LEADER_IN_SECONDS(0, ASCENDING),
    RACE_DISTANCE_TO_COMPETITOR_FARTHEST_AHEAD_IN_METERS(0, ASCENDING), RACE_AVERAGE_ABSOLUTE_CROSS_TRACK_ERROR_IN_METERS(0, ASCENDING),
    RACE_AVERAGE_SIGNED_CROSS_TRACK_ERROR_IN_METERS(0, ASCENDING),
    WINDWARD_DISTANCE_TO_COMPETITOR_FARTHEST_AHEAD(0, ASCENDING), START_TACK(0, ASCENDING), DISTANCE_TO_START_AT_RACE_START(1, ASCENDING),
    TIME_BETWEEN_RACE_START_AND_COMPETITOR_START(1, ASCENDING),
    SPEED_OVER_GROUND_AT_RACE_START(1, DESCENDING), SPEED_OVER_GROUND_WHEN_PASSING_START(1, DESCENDING),
    DISTANCE_TO_STARBOARD_END_OF_STARTLINE_WHEN_PASSING_START_IN_METERS(1, ASCENDING),
    TACK(0, ASCENDING), JIBE(0, ASCENDING), PENALTY_CIRCLE(0, ASCENDING), AVERAGE_MANEUVER_LOSS_IN_METERS(1, ASCENDING),
    AVERAGE_TACK_LOSS_IN_METERS(1, ASCENDING), AVERAGE_JIBE_LOSS_IN_METERS(1, ASCENDING), CURRENT_LEG(0, ASCENDING),
    DISPLAY_LEGS(0, NONE), TIME_TRAVELED(0, ASCENDING), CORRECTED_TIME_TRAVELED(0, ASCENDING),
    TOTAL_TIME_SAILED_DOWNWIND_IN_SECONDS(1, ASCENDING),
    TOTAL_TIME_SAILED_UPWIND_IN_SECONDS(1, ASCENDING),
    TOTAL_TIME_SAILED_REACHING_IN_SECONDS(1, ASCENDING),
    MAXIMUM_SPEED_OVER_GROUND_IN_KNOTS(1, DESCENDING),
    TIME_ON_TIME_FACTOR(4, DESCENDING), TIME_ON_DISTANCE_ALLOWANCE_IN_SECONDS_PER_NAUTICAL_MILE(0, ASCENDING),
    TOTAL_DISTANCE_TRAVELED(0, ASCENDING), TOTAL_AVERAGE_SPEED_OVER_GROUND(2, DESCENDING),
    TOTAL_TIME_SAILED_IN_SECONDS(1, ASCENDING),
    TOTAL_DURATION_FOILED_IN_SECONDS(0, DESCENDING), TOTAL_DISTANCE_FOILED_IN_METERS(0, DESCENDING),
    RACE_CURRENT_SPEED_OVER_GROUND_IN_KNOTS(2, DESCENDING), RACE_CURRENT_RIDE_HEIGHT_IN_METERS(2, DESCENDING),
    RACE_CURRENT_DISTANCE_FOILED_IN_METERS(0, DESCENDING), RACE_CURRENT_DURATION_FOILED_IN_SECONDS(0, DESCENDING),
    RACE_NET_POINTS(2, ASCENDING), REGATTA_NET_POINTS(2, ASCENDING), REGATTA_NET_POINTS_SUM(2, ASCENDING),
    RACE_RATIO_BETWEEN_TIME_SINCE_LAST_POSITION_FIX_AND_AVERAGE_SAMPLING_INTERVAL(1, ASCENDING), RACE_DISTANCE_TO_START_FIVE_SECONDS_BEFORE_RACE_START(1, ASCENDING),
    RACE_SPEED_OVER_GROUND_FIVE_SECONDS_BEFORE_START(2, DESCENDING),
    RACE_CALCULATED_TIME_TRAVELED(0, ASCENDING), RACE_CALCULATED_TIME_AT_ESTIMATED_ARRIVAL_AT_COMPETITOR_FARTHEST_AHEAD(0, ASCENDING),
    RACE_TIME_TRAVELED(0, ASCENDING), RACE_TIME_TRAVELED_UPWIND(0, ASCENDING), RACE_TIME_TRAVELED_DOWNWIND(0, ASCENDING), RACE_TIME_TRAVELED_REACHING(0, ASCENDING),
    DISTANCE_TO_START_LINE(0, ASCENDING), BEAT_ANGLE(0, ASCENDING), COURSE_OVER_GROUND_TRUE_DEGREES(0, ASCENDING), TOTAL_SCORED_RACE_COUNT(0, ASCENDING),
    EXPEDITION_RACE_AWA(0, ASCENDING),
    EXPEDITION_RACE_AWS(0, ASCENDING),
    EXPEDITION_RACE_TWA(0, ASCENDING),
    EXPEDITION_RACE_TWS(0, ASCENDING),
    EXPEDITION_RACE_TWD(0, ASCENDING),
    EXPEDITION_RACE_TARG_TWA(0, ASCENDING),
    EXPEDITION_RACE_BOAT_SPEED(0, ASCENDING),
    EXPEDITION_RACE_TARG_BOAT_SPEED(0, ASCENDING),
    EXPEDITION_RACE_SOG(0, ASCENDING),
    EXPEDITION_RACE_COG(0, ASCENDING),
    EXPEDITION_RACE_FORESTAY_LOAD(0, ASCENDING),
    EXPEDITION_RACE_RAKE(0, ASCENDING),
    EXPEDITION_RACE_COURSE(0, ASCENDING),
    EXPEDITION_RACE_HEADING(0, ASCENDING),
    EXPEDITION_RACE_VMG(0, ASCENDING),
    EXPEDITION_RACE_VMG_TARG_VMG_DELTA(0, ASCENDING),
    EXPEDITION_RACE_RATE_OF_TURN(0, ASCENDING),
    EXPEDITION_RACE_RUDDER_ANGLE(0, ASCENDING),
    EXPEDITION_RACE_HEEL(0, ASCENDING),
    EXPEDITION_RACE_TARGET_HEEL(0, ASCENDING),
    EXPEDITION_RACE_TIME_TO_PORT_LAYLINE(0, ASCENDING),
    EXPEDITION_RACE_TIME_TO_STB_LAYLINE(0, ASCENDING),
    EXPEDITION_RACE_DIST_TO_PORT_LAYLINE(0, ASCENDING),
    EXPEDITION_RACE_DIST_TO_STB_LAYLINE(0, ASCENDING),
    EXPEDITION_RACE_TIME_TO_GUN(0, ASCENDING),
    EXPEDITION_RACE_TIME_TO_COMMITTEE_BOAT(0, ASCENDING),
    EXPEDITION_RACE_TIME_TO_PIN(0, ASCENDING),
    EXPEDITION_RACE_TIME_TO_BURN_TO_LINE(0, ASCENDING),
    EXPEDITION_RACE_TIME_TO_BURN_TO_COMMITTEE_BOAT(0, ASCENDING),
    EXPEDITION_RACE_TIME_TO_BURN_TO_PIN (0, ASCENDING),
    EXPEDITION_RACE_DISTANCE_TO_COMMITTEE_BOAT(0, ASCENDING),
    EXPEDITION_RACE_DISTANCE_TO_PIN(0, ASCENDING),
    EXPEDITION_RACE_DISTANCE_BELOW_LINE(0, ASCENDING),
    EXPEDITION_RACE_LINE_SQUARE_FOR_WIND_DIRECTION(0, ASCENDING),
    EXPEDITION_LEG_AWA(0, ASCENDING),
    EXPEDITION_LEG_AWS(0, ASCENDING),
    EXPEDITION_LEG_TWA(0, ASCENDING),
    EXPEDITION_LEG_TWS(0, ASCENDING),
    EXPEDITION_LEG_TWD(0, ASCENDING),
    EXPEDITION_LEG_TARG_TWA(0, ASCENDING),
    EXPEDITION_LEG_BOAT_SPEED(0, ASCENDING),
    EXPEDITION_LEG_TARG_BOAT_SPEED(0, ASCENDING),
    EXPEDITION_LEG_SOG(0, ASCENDING),
    EXPEDITION_LEG_COG(0, ASCENDING),
    EXPEDITION_LEG_FORESTAY_LOAD(0, ASCENDING),
    EXPEDITION_LEG_RAKE(0, ASCENDING),
    EXPEDITION_LEG_COURSE(0, ASCENDING),
    EXPEDITION_LEG_HEADING(0, ASCENDING),
    EXPEDITION_LEG_VMG(0, ASCENDING),
    EXPEDITION_LEG_VMG_TARG_VMG_DELTA(0, ASCENDING),
    EXPEDITION_LEG_RATE_OF_TURN(0, ASCENDING),
    EXPEDITION_LEG_RUDDER_ANGLE(0, ASCENDING),
    EXPEDITION_LEG_HEEL(0, ASCENDING),
    EXPEDITION_LEG_TARGET_HEEL(0, ASCENDING),
    EXPEDITION_LEG_TIME_TO_PORT_LAYLINE(0, ASCENDING),
    EXPEDITION_LEG_TIME_TO_STB_LAYLINE(0, ASCENDING),
    EXPEDITION_LEG_DIST_TO_PORT_LAYLINE(0, ASCENDING),
    EXPEDITION_LEG_DIST_TO_STB_LAYLINE(0, ASCENDING),
    EXPEDITION_LEG_TIME_TO_GUN(0, ASCENDING),
    EXPEDITION_LEG_TIME_TO_COMMITTEE_BOAT(0, ASCENDING),
    EXPEDITION_LEG_TIME_TO_PIN(0, ASCENDING),
    EXPEDITION_LEG_TIME_TO_BURN_TO_LINE(0, ASCENDING),
    EXPEDITION_LEG_TIME_TO_BURN_TO_COMMITTEE_BOAT(0, ASCENDING),
    EXPEDITION_LEG_TIME_TO_BURN_TO_PIN (0, ASCENDING),
    EXPEDITION_LEG_DISTANCE_TO_COMMITTEE_BOAT(0, ASCENDING),
    EXPEDITION_LEG_DISTANCE_TO_PIN(0, ASCENDING),
    EXPEDITION_LEG_DISTANCE_BELOW_LINE(0, ASCENDING),
    EXPEDITION_LEG_LINE_SQUARE_FOR_WIND_DIRECTION(0, ASCENDING),
    EXPEDITION_RACE__HEEL_IN_DEGREES(2,DESCENDING),
    EXPEDITION_RACE_CURRENT_PITCH_IN_DEGREES(2,DESCENDING),
    ;
    private int precision;
    
    private SortingOrder defaultSortingOrder;
    
    DetailType(int precision, SortingOrder defaultSortingOrder) {
        this.precision = precision;
        this.defaultSortingOrder = defaultSortingOrder;
    }
    
    public int getPrecision() {
        return precision;
    }

    public SortingOrder getDefaultSortingOrder() {
        return defaultSortingOrder;
    }
    
    /**
     * Default set of DetailTypes for charts, this list contains all commonly available data, without the use of extra
     * sensors.
     */
    public static List<DetailType> getDefaultDetailTypesForChart() {
        List<DetailType> availableDetailsTypes = new ArrayList<>();
        availableDetailsTypes.add(DetailType.WINDWARD_DISTANCE_TO_COMPETITOR_FARTHEST_AHEAD);
        availableDetailsTypes.add(DetailType.DISTANCE_TRAVELED);
        availableDetailsTypes.add(DetailType.DISTANCE_TRAVELED_INCLUDING_GATE_START);
        availableDetailsTypes.add(DetailType.VELOCITY_MADE_GOOD_IN_KNOTS);
        availableDetailsTypes.add(DetailType.GAP_TO_LEADER_IN_SECONDS);
        availableDetailsTypes.add(DetailType.RACE_CURRENT_SPEED_OVER_GROUND_IN_KNOTS);
        availableDetailsTypes.add(DetailType.RACE_RANK);
        availableDetailsTypes.add(DetailType.REGATTA_RANK);
        availableDetailsTypes.add(DetailType.DISTANCE_TO_START_LINE);
        availableDetailsTypes.add(DetailType.BEAT_ANGLE);
        availableDetailsTypes.add(DetailType.COURSE_OVER_GROUND_TRUE_DEGREES);
        return availableDetailsTypes;
    }

    /**
     * Special List of DetailTypes, that allows operators to select for example the RideHeight, that is usually only selectable, if it already has data.
     */
    public static List<DetailType> getAutoplayDetailTypesForChart() {
        List<DetailType> availableDetailsTypes = getDefaultDetailTypesForChart();
        availableDetailsTypes.add(DetailType.RACE_CURRENT_RIDE_HEIGHT_IN_METERS);
        availableDetailsTypes.add(DetailType.CURRENT_HEEL_IN_DEGREES);
        availableDetailsTypes.add(DetailType.CURRENT_PITCH_IN_DEGREES);
        return availableDetailsTypes;
    }
    
    public static List<DetailType> getRaceExpeditionDetailTypes() {
        ArrayList<DetailType> allowed = new ArrayList<>();
        allowed.add(EXPEDITION_RACE_AWA);
        allowed.add(EXPEDITION_RACE_AWS);
        allowed.add(EXPEDITION_RACE_TWA);
        allowed.add(EXPEDITION_RACE_TWS);
        allowed.add(EXPEDITION_RACE_TWD);
        allowed.add(EXPEDITION_RACE_TARG_TWA);
        allowed.add(EXPEDITION_RACE_BOAT_SPEED);
        allowed.add(EXPEDITION_RACE_TARG_BOAT_SPEED);
        allowed.add(EXPEDITION_RACE_SOG);
        allowed.add(EXPEDITION_RACE_COG);
        allowed.add(EXPEDITION_RACE_FORESTAY_LOAD);
        allowed.add(EXPEDITION_RACE_RAKE);
        allowed.add(EXPEDITION_RACE_COURSE);
        allowed.add(EXPEDITION_RACE_HEADING);
        allowed.add(EXPEDITION_RACE_VMG);
        allowed.add(EXPEDITION_RACE_VMG_TARG_VMG_DELTA);
        allowed.add(EXPEDITION_RACE_RATE_OF_TURN);
        allowed.add(EXPEDITION_RACE_RUDDER_ANGLE);
        allowed.add(EXPEDITION_RACE_HEEL);
        allowed.add(EXPEDITION_RACE_TARGET_HEEL);
        allowed.add(EXPEDITION_RACE_TIME_TO_PORT_LAYLINE);
        allowed.add(EXPEDITION_RACE_TIME_TO_STB_LAYLINE);
        allowed.add(EXPEDITION_RACE_DIST_TO_PORT_LAYLINE);
        allowed.add(EXPEDITION_RACE_DIST_TO_STB_LAYLINE);
        allowed.add(EXPEDITION_RACE_TIME_TO_GUN);
        allowed.add(EXPEDITION_RACE_TIME_TO_COMMITTEE_BOAT);
        allowed.add(EXPEDITION_RACE_TIME_TO_PIN);
        allowed.add(EXPEDITION_RACE_TIME_TO_BURN_TO_LINE);
        allowed.add(EXPEDITION_RACE_TIME_TO_BURN_TO_COMMITTEE_BOAT);
        allowed.add(EXPEDITION_RACE_TIME_TO_BURN_TO_PIN);
        allowed.add(EXPEDITION_RACE_DISTANCE_TO_COMMITTEE_BOAT);
        allowed.add(EXPEDITION_RACE_DISTANCE_TO_PIN);
        allowed.add(EXPEDITION_RACE_DISTANCE_BELOW_LINE);
        allowed.add(EXPEDITION_RACE_LINE_SQUARE_FOR_WIND_DIRECTION);
        return allowed;
    }
    
    public static List<DetailType> getRaceExtendedBravoDetailTypes() {
        ArrayList<DetailType> allowed = new ArrayList<>();
        allowed.add(DetailType.CURRENT_PORT_DAGGERBOARD_RAKE);
        allowed.add(DetailType.CURRENT_STBD_DAGGERBOARD_RAKE);
        allowed.add(DetailType.CURRENT_PORT_RUDDER_RAKE);
        allowed.add(DetailType.CURRENT_STBD_RUDDER_RAKE);
        allowed.add(DetailType.CURRENT_MAST_ROTATION_IN_DEGREES);
        allowed.add(DetailType.CURRENT_LEEWAY_IN_DEGREES);
        allowed.add(DetailType.CURRENT_SET);
        allowed.add(DetailType.CURRENT_DRIFT_IN_DEGREES);
        allowed.add(DetailType.CURRENT_DEPTH_IN_METERS);
        allowed.add(DetailType.CURRENT_RUDDER_IN_DEGREES);
        allowed.add(DetailType.CURRENT_TACK_ANGLE_IN_DEGREES);
        allowed.add(DetailType.CURRENT_DEFLECTOR_PERCENTAGE);
        allowed.add(DetailType.CURRENT_DEFLECTOR_IN_MILLIMETERS);
        allowed.add(DetailType.CURRENT_RAKE_IN_DEGREES);
        allowed.add(DetailType.CURRENT_TARGET_HEEL_ANGLE_IN_DEGREES);
        allowed.add(DetailType.CURRENT_FORESTAY_LOAD);
        allowed.add(DetailType.CURRENT_FORESTAY_PRESSURE);
        allowed.add(DetailType.CURRENT_TARGET_BOATSPEED_PERCENTAGE);
        return allowed;
    }
    
    public static List<DetailType> getRaceBravoDetailTypes() {
        ArrayList<DetailType> allowed = new ArrayList<>();
        allowed.add(DetailType.RACE_CURRENT_RIDE_HEIGHT_IN_METERS);
        allowed.add(DetailType.CURRENT_HEEL_IN_DEGREES);
        allowed.add(DetailType.CURRENT_PITCH_IN_DEGREES);
        return allowed;
    }

    public static List<DetailType> getAllRaceDetailTypes() {
        ArrayList<DetailType> allowed = new ArrayList<>();
        allowed.add(RACE_GAP_TO_LEADER_IN_SECONDS);
        allowed.add(RACE_AVERAGE_SPEED_OVER_GROUND_IN_KNOTS);
        allowed.add(RACE_DISTANCE_TRAVELED);
        allowed.add(RACE_DISTANCE_TRAVELED_INCLUDING_GATE_START);
        allowed.add(RACE_TIME_TRAVELED);
        allowed.add(RACE_CALCULATED_TIME_TRAVELED);
        allowed.add(RACE_CALCULATED_TIME_AT_ESTIMATED_ARRIVAL_AT_COMPETITOR_FARTHEST_AHEAD);
        allowed.add(RACE_CURRENT_SPEED_OVER_GROUND_IN_KNOTS);
        allowed.add(RACE_CURRENT_RIDE_HEIGHT_IN_METERS);
        allowed.add(RACE_CURRENT_DISTANCE_FOILED_IN_METERS);
        allowed.add(RACE_CURRENT_DURATION_FOILED_IN_SECONDS);
        allowed.add(RACE_DISTANCE_TO_COMPETITOR_FARTHEST_AHEAD_IN_METERS);
        allowed.add(NUMBER_OF_MANEUVERS);
        allowed.add(DISPLAY_LEGS);
        allowed.add(RACE_AVERAGE_ABSOLUTE_CROSS_TRACK_ERROR_IN_METERS);
        allowed.add(RACE_AVERAGE_SIGNED_CROSS_TRACK_ERROR_IN_METERS);
        allowed.add(RACE_RATIO_BETWEEN_TIME_SINCE_LAST_POSITION_FIX_AND_AVERAGE_SAMPLING_INTERVAL);
        allowed.add(CURRENT_LEG);
        allowed.addAll(getRaceExpeditionDetailTypes());
        allowed.addAll(getRaceBravoDetailTypes());
        allowed.addAll(getRaceExtendedBravoDetailTypes());
        return allowed;
    }

    /**
     * Returns all types in the enum, minus those for expedition, bravo and bravo extended
     * @return
     */
    public static Collection<DetailType> getAllNonRestrictedDetailTypes() {
        List<DetailType> all = new ArrayList<>(Arrays.asList(values()));
        all.removeAll(getRaceBravoDetailTypes());
        all.removeAll(getRaceExpeditionDetailTypes());
        all.removeAll(getRaceExtendedBravoDetailTypes());
        all.removeAll(getLegExpeditionDetailColumnTypes());
        return all;
    }
    
    public static List<DetailType> getAvailableOverallDetailColumnTypes() {
        return Arrays.asList(new DetailType[] { DetailType.REGATTA_RANK, DetailType.TOTAL_DISTANCE_TRAVELED,
                DetailType.TOTAL_AVERAGE_SPEED_OVER_GROUND, DetailType.TOTAL_TIME_SAILED_IN_SECONDS,
                DetailType.TOTAL_DURATION_FOILED_IN_SECONDS, DetailType.TOTAL_DISTANCE_FOILED_IN_METERS,
                DetailType.MAXIMUM_SPEED_OVER_GROUND_IN_KNOTS, DetailType.TIME_ON_TIME_FACTOR,
                DetailType.TIME_ON_DISTANCE_ALLOWANCE_IN_SECONDS_PER_NAUTICAL_MILE,
                DetailType.TOTAL_SCORED_RACE_COUNT });
    }
    
    
    public static List<DetailType> getLegDetailColumnTypes() {
        return Arrays.asList(new DetailType[] { DetailType.AVERAGE_SPEED_OVER_GROUND_IN_KNOTS, DetailType.DISTANCE_TRAVELED,
                DetailType.DISTANCE_TRAVELED_INCLUDING_GATE_START, DetailType.GAP_TO_LEADER_IN_SECONDS,
                DetailType.GAP_CHANGE_SINCE_LEG_START_IN_SECONDS, DetailType.SIDE_TO_WHICH_MARK_AT_LEG_START_WAS_ROUNDED, 
                DetailType.CURRENT_SPEED_OVER_GROUND_IN_KNOTS, DetailType.CURRENT_HEEL_IN_DEGREES,
                DetailType.CURRENT_PITCH_IN_DEGREES, DetailType.CURRENT_RIDE_HEIGHT_IN_METERS,
                DetailType.CURRENT_DISTANCE_FOILED_IN_METERS, DetailType.CURRENT_DURATION_FOILED_IN_SECONDS,
                DetailType.WINDWARD_DISTANCE_TO_GO_IN_METERS, DetailType.NUMBER_OF_MANEUVERS,
                DetailType.ESTIMATED_TIME_TO_NEXT_WAYPOINT_IN_SECONDS, DetailType.VELOCITY_MADE_GOOD_IN_KNOTS,
                DetailType.TIME_TRAVELED, DetailType.CORRECTED_TIME_TRAVELED, DetailType.AVERAGE_ABSOLUTE_CROSS_TRACK_ERROR_IN_METERS,
                DetailType.AVERAGE_SIGNED_CROSS_TRACK_ERROR_IN_METERS, DetailType.RANK_GAIN});
    }

    public static List<DetailType> getLegExpeditionDetailColumnTypes() {
        return Arrays.asList(new DetailType[] { EXPEDITION_LEG_AWA, EXPEDITION_LEG_AWS, EXPEDITION_LEG_TWA, EXPEDITION_LEG_TWS, EXPEDITION_LEG_TWD, EXPEDITION_LEG_TARG_TWA,
                EXPEDITION_LEG_BOAT_SPEED, EXPEDITION_LEG_TARG_BOAT_SPEED, EXPEDITION_LEG_SOG, EXPEDITION_LEG_COG, EXPEDITION_LEG_FORESTAY_LOAD, EXPEDITION_LEG_RAKE,
                EXPEDITION_LEG_COURSE, EXPEDITION_LEG_HEADING, EXPEDITION_LEG_VMG, EXPEDITION_LEG_VMG_TARG_VMG_DELTA, EXPEDITION_LEG_RATE_OF_TURN, EXPEDITION_LEG_RUDDER_ANGLE, EXPEDITION_LEG_HEEL,
                EXPEDITION_LEG_TARGET_HEEL, EXPEDITION_LEG_TIME_TO_PORT_LAYLINE, EXPEDITION_LEG_TIME_TO_STB_LAYLINE, EXPEDITION_LEG_DIST_TO_PORT_LAYLINE,
                EXPEDITION_LEG_DIST_TO_STB_LAYLINE, EXPEDITION_LEG_TIME_TO_GUN, EXPEDITION_LEG_TIME_TO_COMMITTEE_BOAT, EXPEDITION_LEG_TIME_TO_PIN,
                EXPEDITION_LEG_TIME_TO_BURN_TO_LINE, EXPEDITION_LEG_TIME_TO_BURN_TO_COMMITTEE_BOAT, EXPEDITION_LEG_TIME_TO_BURN_TO_PIN,
                EXPEDITION_LEG_DISTANCE_TO_COMMITTEE_BOAT, EXPEDITION_LEG_DISTANCE_TO_PIN, EXPEDITION_LEG_DISTANCE_BELOW_LINE,
                EXPEDITION_LEG_LINE_SQUARE_FOR_WIND_DIRECTION });
    }

    public static List<DetailType> getAllLegDetailColumnTypes() {
        ArrayList<DetailType> all = new ArrayList<>();
        all.addAll(getLegDetailColumnTypes());
        all.addAll(getLegExpeditionDetailColumnTypes());
        return all;
    }
}