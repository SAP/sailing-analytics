
[main]
#shiro.loginUrl = /Login.html
#shiro.successUrl = /UserManagement.html
# Use Built-in Chache Manager
builtInCacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
securityManager.cacheManager = $builtInCacheManager

credentialsMatcher = org.apache.shiro.authc.credential.Sha256CredentialsMatcher
# base64 encoding, not hex in this example:
credentialsMatcher.storedCredentialsHexEncoded = false
credentialsMatcher.hashIterations = 1024

upRealm = com.sap.sse.security.UsernamePasswordRealm
upRealm.credentialsMatcher = $credentialsMatcher

oauthRealm = com.sap.sse.security.OAuthRealm

sessionManager = org.apache.shiro.web.session.mgt.DefaultWebSessionManager
securityManager.sessionManager = $sessionManager

securityManager.realms = $upRealm, $oauthRealm

authc = org.apache.shiro.web.filter.authc.PassThruAuthenticationFilter
authc.loginUrl = /Login.html?gwt.codesvr=127.0.0.1:9997
authc.successUrl  = /UserManagement.html

[urls]
# The /login.jsp is not restricted to authenticated users (otherwise no one could log in!), but
# the 'authc' filter must still be specified for it so it can process that url's
# login submissions. It is 'smart' enough to allow those requests through as specified by the
# shiro.loginUrl above.
#/security/ui/UserManagement.html = authc
#/ui/UserManagement.html = authc


#/Login.html = anon
#/../../service/** = anon
#/UserManagement.html = authc