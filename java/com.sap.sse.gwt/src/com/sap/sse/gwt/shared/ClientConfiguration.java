package com.sap.sse.gwt.shared;

import java.util.Optional;

import com.google.gwt.core.client.GWT;
import com.sap.sse.branding.BrandingConfigurationService;
import com.sap.sse.branding.shared.BrandingConfiguration;
import com.sap.sse.gwt.client.context.data.ClientConfigurationContextDataJSO;
import com.sap.sse.gwt.client.context.impl.ClientConfigurationContextDataFactoryImpl;
import com.sap.sse.gwt.jaxrs.api.ClientConfigurationContextScriptGenerator;

/**
 * Provides information for the GWT client if debranding/whitelabeling is currently brandingActive.
 * Data is read from the static HTML page which starts the GWT client code.
 * Within the header you need to insert a script tag that installs an object with the necessary data into the
 * document object tree of the browser:
 * <pre>
 *     &lt;script type="text/javascript" src="/gwt-base/api/client_configuration_context"&gt;&lt;/script&gt;
 * </pre>
 * The data in this structure is integrated into the document object tree within the browser. It looks like this:
 * <pre>
 *      document.clientConfigurationContext={"brandingActive":true,"brandTitle":"SAP ","debrandingActive":false,"whitelabeled":""};
 * </pre>
 * That can be accessed from here using the {@link ClientConfigurationContextDataJSO}. Responsible for the properties listed in the
 * object is {@link BrandingConfigurationService#getBrandingConfigurationPropertiesForJspContext(Optional)} and its
 * {@link BrandingConfigurationService#getActiveBrandingConfiguration() active branding configuration}, or none if the solution
 * is running without any branding.<p>
 * 
 * The structure in the HTML is generated by the server, see {@code com.sap.sse.branding.ClientConfigurationListener} for that.
 * 
 * To add new fields the following steps must be performed:
 * <ul>
 * <li>template within the HTML page must be extend by a new field declaration inside {@code document.clientConfigurationContext}.</li>
 * <li>corresponding variable must be declared and filled with the appropriate value in {@link ClientConfigurationFilter}</li>
 * <li>class {@link ClientConfigurationContextDataJSO} must be extended with an getter for the new field</li>
 * </ul>
 * 
 * @see ClientConfigurationContextScriptGenerator
 * 
 * @author Georg Herdt
 *
 */
public class ClientConfiguration implements BrandingConfiguration {

    private static final ClientConfiguration INSTANCE;

    static {
        INSTANCE = new ClientConfiguration();
    }

    public static ClientConfiguration getInstance() {
        return INSTANCE;
    }

    private boolean brandingActive = true;
    private String id;
    private String brandTitle;
    private String defaultBrandingLogoURL;
    private String greyTransparentLogoURL;

    public ClientConfiguration() {
        try {
            ClientConfigurationContextDataJSO dataJso = new ClientConfigurationContextDataFactoryImpl().getInstance();
            id = dataJso.getId();
            brandTitle = dataJso.getBrandTitle();
            defaultBrandingLogoURL = dataJso.getDefaultBrandingLogoURL();
            greyTransparentLogoURL = dataJso.getGreyTransparentLogoURL();
            brandingActive = !dataJso.isDebrandingActive();
        } catch (RuntimeException e) {
            GWT.log("no branding information found.");
        }
    }

    /**
     * Access whitelabeling information.
     * @return true when branding information shall be shown
     */
    public boolean isBrandingActive() {
        return brandingActive;
    }

    @Override
    public String getBrandTitle() {
        return brandTitle;
    }

    @Override
    public String getDefaultBrandingLogoURL() {
        return defaultBrandingLogoURL;
    }

    @Override
    public String getGreyTransparentLogoURL() {
        return greyTransparentLogoURL;
    }

    @Override
    public String getId() {
        return id;
    }
}
