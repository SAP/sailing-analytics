/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RaceEditor.java
 *
 * Created on 15.11.2011, 14:14:41
 */
package com.sap.sailing.domain.swisstimingadapter.test.ui;

import com.sap.sailing.domain.swisstimingadapter.classes.messages.ABSMessage;
import com.sap.sailing.domain.swisstimingadapter.classes.messages.CAMMessage;
import com.sap.sailing.domain.swisstimingadapter.classes.messages.CCGMessage;
import com.sap.sailing.domain.swisstimingadapter.classes.messages.RACMessage;
import com.sap.sailing.domain.swisstimingadapter.classes.messages.RPDMessage;
import com.sap.sailing.domain.swisstimingadapter.classes.messages.STLMessage;
import com.sap.sailing.domain.swisstimingadapter.classes.messages.TMDMessage;
import com.sap.sailing.domain.swisstimingadapter.classes.services.MessageFileService;
import com.sap.sailing.domain.swisstimingadapter.classes.services.MessageFileServiceImpl;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author D056866
 */
public class SwissTimingRaceEditor extends javax.swing.JFrame {
    /**
     * 
     */
    private static final long serialVersionUID = 5371529176671230432L;
    private List<Object> commands;
    private JFileChooser fc;
    private MessageFileService mfs;

    /** Creates new form RaceEditor */
    public SwissTimingRaceEditor() {
        initComponents();
        fc = new JFileChooser();
        fc.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f) {
                return f.getPath().trim().toLowerCase().endsWith(".txt") || f.isDirectory();
            }

            @Override
            public String getDescription() {
                return "Textfile";
            }
        });
        mfs = new MessageFileServiceImpl();
        commands = new ArrayList<Object>();
        jCommandList.setListData(getArrayOfList(commands));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings({ "serial" })
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jCommandList = new javax.swing.JList<Object>();
        jAdd = new javax.swing.JButton();
        jRemove = new javax.swing.JButton();
        jEdit = new javax.swing.JButton();
        jMoveUp = new javax.swing.JButton();
        jMoveDown = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jImport = new javax.swing.JMenuItem();
        jExport = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SwissTiming-Sample-Race Editor");

        jCommandList.setModel(new javax.swing.AbstractListModel<Object>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jCommandList);

        jAdd.setText("Add");
        jAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAddActionPerformed(evt);
            }
        });

        jRemove.setText("Remove");
        jRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRemoveActionPerformed(evt);
            }
        });

        jEdit.setText("Edit");
        jEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jEditActionPerformed(evt);
            }
        });

        jMoveUp.setText("Up");
        jMoveUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMoveUpActionPerformed(evt);
            }
        });

        jMoveDown.setText("Down");
        jMoveDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMoveDownActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jImport.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        jImport.setText("Import");
        jImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jImportActionPerformed(evt);
            }
        });
        jMenu1.add(jImport);

        jExport.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jExport.setText("Export");
        jExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jExportActionPerformed(evt);
            }
        });
        jMenu1.add(jExport);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        jMenuItem3.setText("Exit");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jMoveDown, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jMoveUp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jEdit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jMoveUp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jMoveDown)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAddActionPerformed
        // TODO Create Dialog
        CommandChoice cc = new CommandChoice(this, true);
        cc.setVisible(true);
        switch(cc.getUserChoice()){
            case CommandChoice.RAC:
                EditRAC jRac = new EditRAC(this, true, null);
                jRac.setVisible(true);
                commands.add(jRac.getRACMessage());
                break;
            case CommandChoice.ABS:
                EditABS jAbs = new EditABS(this, true, null);
                jAbs.setVisible(true);
                commands.add(jAbs.getMessage());
                break;
            case CommandChoice.RPD:
                EditRPD jRpd = new EditRPD(this, true, null);
                jRpd.setVisible(true);
                commands.add(jRpd.getMessage());
                break;
            case CommandChoice.CCG:
                EditCCG jCcg = new EditCCG(this, true, null);
                jCcg.setVisible(true);
                commands.add(jCcg.getMessage());
                break;
            case CommandChoice.STL:
                EditSTL jStl = new EditSTL(this, true, null);
                jStl.setVisible(true);
                commands.add(jStl.getMessage());
                break;
            case CommandChoice.CAM:
                EditCAM jCam = new EditCAM(this, true, null);
                jCam.setVisible(true);
                commands.add(jCam.getMessage());
                break;
            case CommandChoice.TMD:
                EditTMD jTmd = new EditTMD(this, true, null);
                jTmd.setVisible(true);
                commands.add(jTmd.getMessage());
                break;
        }
        jCommandList.setListData(getArrayOfList(commands));
    }//GEN-LAST:event_jAddActionPerformed

    private void jEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEditActionPerformed
        // TODO add your handling code here:
        Object o = jCommandList.getSelectedValue();
        if (o != null){
            o = commands.get(commands.indexOf(o));
            if (o instanceof RACMessage){
                EditRAC jRac = new EditRAC(this, true, (RACMessage) o);
                jRac.setVisible(true);
            }
            else if (o instanceof ABSMessage){
                EditABS jAbs = new EditABS(this, true, (ABSMessage) o);
                jAbs.setVisible(true);
            }
            else if (o instanceof RPDMessage){
                EditRPD jRpd = new EditRPD(this, true, (RPDMessage) o);
                jRpd.setVisible(true);
            }
            else if (o instanceof CCGMessage){
                EditCCG jCcg = new EditCCG(this, true, (CCGMessage) o);
                jCcg.setVisible(true);
            }
            else if (o instanceof STLMessage){
                EditSTL jStl = new EditSTL(this, true, (STLMessage) o);
                jStl.setVisible(true);
            }
            else if (o instanceof CAMMessage){
                EditCAM jCam = new EditCAM(this, true, (CAMMessage) o);
                jCam.setVisible(true);
            }
            else if (o instanceof TMDMessage){
                EditTMD jTmd = new EditTMD(this, true, (TMDMessage) o);
                jTmd.setVisible(true);
            }
            jCommandList.setListData(getArrayOfList(commands));
        }
    }//GEN-LAST:event_jEditActionPerformed

    private void jRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRemoveActionPerformed
        // TODO add your handling code here:
        for (Object o : jCommandList.getSelectedValuesList())
            commands.remove(o);
        jCommandList.setListData(getArrayOfList(commands));
    }//GEN-LAST:event_jRemoveActionPerformed

    private void jMoveUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMoveUpActionPerformed
        // TODO add your handling code here:
        Object o = jCommandList.getSelectedValue();
        int index = 0;
        if (o != null){
            index = jCommandList.getSelectedIndex();
            if (index < 0)
                return;
            index--;
            if (index >= 0){
                commands.remove(o);
                commands.add(index, o);
            }
        }
        jCommandList.setListData(getArrayOfList(commands));
        if (index >= 0)
            jCommandList.setSelectedIndex(index);
    }//GEN-LAST:event_jMoveUpActionPerformed

    private void jMoveDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMoveDownActionPerformed
        // TODO add your handling code here:
        Object o = jCommandList.getSelectedValue();
        int index = 0;
        if (o != null){
            index = jCommandList.getSelectedIndex();
            if (index < 0)
                return;
            index++;
            if (index < commands.size()){
                commands.remove(o);
                commands.add(index, o);
            }
        }
        jCommandList.setListData(getArrayOfList(commands));
        if (index >= 0)
            jCommandList.setSelectedIndex(index);
    }//GEN-LAST:event_jMoveDownActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        int a = JOptionPane.showConfirmDialog(this, "When you exit without saving you will lose all data.\n Are you sure?", "Exit", JOptionPane.YES_NO_OPTION);
        if (a == JOptionPane.YES_OPTION)
            System.exit(0);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jImportActionPerformed
        // TODO add your handling code here:
        int ret = fc.showDialog(this, "Import");
        if (ret == JFileChooser.APPROVE_OPTION){
            File f = fc.getSelectedFile();
            List<Object> al = null;
            try {
                al = mfs.readListFromFile(f);
            } catch (Exception ex) {
                Logger.getLogger(SwissTimingRaceEditor.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (al != null)
                commands = al;
            jCommandList.setListData(getArrayOfList(commands));
        }
    }//GEN-LAST:event_jImportActionPerformed

    private void jExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jExportActionPerformed
        // TODO add your handling code here:
        int ret = fc.showDialog(this, "Export");
        if (ret == JFileChooser.APPROVE_OPTION){
            File f = fc.getSelectedFile();
            try {
                mfs.writeListToFile(f, commands);
            } catch (IOException ex) {
                Logger.getLogger(SwissTimingRaceEditor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jExportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SwissTimingRaceEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SwissTimingRaceEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SwissTimingRaceEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SwissTimingRaceEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new SwissTimingRaceEditor().setVisible(true);
            }
        });
    }
    
    private Object[] getArrayOfList(List<Object> al){
        Object[] obj = new Object[al.size()];
        for (int i = 0; i < obj.length; i++)
            obj[i] = al.get(i);
        return obj;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jAdd;
    private javax.swing.JList<Object> jCommandList;
    private javax.swing.JButton jEdit;
    private javax.swing.JMenuItem jExport;
    private javax.swing.JMenuItem jImport;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JButton jMoveDown;
    private javax.swing.JButton jMoveUp;
    private javax.swing.JButton jRemove;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
