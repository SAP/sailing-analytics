#!/bin/bash
#
# sailing	Starts sailing services
#
# chkconfig: 2345 95 10
# description: Sailing contains all sailing services
#
### BEGIN INIT INFO
# Provides:          sailing
# Required-Start:    $local_fs $network $named $remote_fs
# Should-Start:      
# Required-Stop:
# Should-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: The sailing service
# Description:       Start all sailing services required for this instance
### END INIT INFO

# Source function library.
. /etc/init.d/functions

RETVAL=0

SERVERS_DIR=/home/sailing/servers
cd "${SERVERS_DIR}"
JAVA_START_INSTANCES="$(find * -type d -prune)"
GIT_REPOSITORY=/home/sailing/code
APACHE_CONFIG_DIR=/etc/httpd/conf.d
APACHE_INTERNALS_CONFIG_FILE="$APACHE_CONFIG_DIR/001-internals.conf"
EC2_METADATA_CMD=/opt/aws/bin/ec2-metadata
REBOOT_INDICATOR=/var/run/is-rebooted
SSH_KEY_READER_BEARER_TOKEN=/root/ssh-key-reader.token

echo "Executing with $1 at `date`" >>/var/log/sailing.err

start_tmux() {
	su - sailing -c "/home/sailing/bin/tmuxConsole.sh unattended"
	success
}

start_servers() {
        /usr/local/bin/update_authorized_keys_for_landscape_managers $( cat ${SSH_KEY_READER_BEARER_TOKEN} ) 2>&1 >>/var/log/sailing.err
        if which $EC2_METADATA_CMD && $EC2_METADATA_CMD -d | sed "s/user-data\: //g" | grep "^image-upgrade$"; then
          echo "Found image-upgrade in EC2 user data; upgrading image, then probably shutting down for AMI creation depending on the no-shutdown user data string..." >>/var/log/sailing.err
          $GIT_REPOSITORY/configuration/imageupgrade.sh
        else
          echo "No image-upgrade request found in EC2 user data $($EC2_METADATA_CMD -d); proceeding with regular server launch..." >>/var/log/sailing.err
	  echo "Servers to launch: ${JAVA_START_INSTANCES}" >>/var/log/sailing.err
          if [ -f "${REBOOT_INDICATOR}" ]; then
	    echo "This is a re-boot. No EC2 user data is evaluated for server configuration; no server configuration is performed. Only configured applications are launched." >>/var/log/sailing.err
	    for conf in ${JAVA_START_INSTANCES}; do
	      su - sailing -c "cd ${SERVERS_DIR}/${conf} && ./start" 2>>/var/log/sailing.err >>/var/log/sailing.err
	    done
	  else
	    echo "This is a first-time boot. EC2 user data is evaluated for potential application deployment and configuration; reverse proxy entries may be created, and applications are launched." >>/var/log/sailing.err
	    FIRST_SERVER=$( eval $( ${EC2_METADATA_CMD} -d | sed -e 's/^user-data: //' ); echo $SERVER_NAME )
	    configure_and_start_server "${FIRST_SERVER}"
	    create_basic_httpd_config "${FIRST_SERVER}"
	    reload_httpd
	    echo 1 >"${REBOOT_INDICATOR}"
	  fi
	fi
}

# Call with the server directory name (not the full path, just a single element from ${JAVA_START_INSTANCE}) as parameter
# Example:        configure_and_start_server server
# This is expected to be called only in case there is only one server to configure; otherwise, the same EC2 user data
# would get applied to all application configurations which would not be a good idea.
configure_and_start_server() {
  conf="$1"
  mkdir -p "${SERVERS_DIR}/${conf}" >/dev/null 2>/dev/null
  local ENV_SH="${SERVERS_DIR}/$conf/env.sh"
  su - sailing -c "cd ${SERVERS_DIR}/${conf} && ${GIT_REPOSITORY}/java/target/refreshInstance.sh auto-install; ./start; ./defineReverseProxyMappings.sh" 2>>/var/log/sailing.err >>/var/log/sailing.err
  RETVAL=$?
  [ $RETVAL -eq 0 ] && success || failure
}

stop_servers() {
	for conf in $JAVA_START_INSTANCES; do
		echo "Stopping Java server $conf" >> /var/log/sailing.err
		su - sailing -c "cd $SERVERS_DIR/$conf && ./stop"
		RETVAL=$?
		[ $RETVAL -eq 0 ] && success || failure
		stop_httpd
		sync_logs
	done
}

sync_logs() {
	echo "Executing logrotate followed by a sync to ensure that logs are synchronized" >> /var/log/sailing.err
	logrotate -f /etc/logrotate.conf
	sync
}

reload_httpd() {
	echo "Will try to launch httpd so this replica can work with an ELB easily." >>/var/log/sailing.err
	if [ -x /etc/init.d/httpd ]; then
	  echo "Reloading httpd configuration..." >>/var/log/sailing.err
	  service httpd reload
	else
	  echo "Can't launch httpd; start script doesn't seem to be installed at /etc/init.d/httpd"
	fi
}

# Adds a Plain-SSL mapping to the first server's port and a mapping for /internal-server-status, both to 001-internals.conf
create_basic_httpd_config() {
    FIRST_SERVER=$1
    if [ -d $SERVERS_DIR/$FIRST_SERVER ]; then
      source $SERVERS_DIR/$FIRST_SERVER/env.sh
    fi
    echo "Writing macro invocation to ${APACHE_INTERNALS_CONFIG_FILE} to map internal IP $INSTANCE_INTERNAL_IP4 to plain server running $SERVER_PORT..." >>/var/log/sailing.err
    echo "Use Plain-SSL ${INSTANCE_INTERNAL_IP4} 127.0.0.1 $SERVER_PORT" >"${APACHE_INTERNALS_CONFIG_FILE}"
    # Append Apache macro invocation for /internal-server-status based on mod_status and INSTANCE_DNS to "${APACHE_INTERNALS_CONFIG_FILE}"
    echo "Appending macro usage for $INSTANCE_DNS/internal-server-status URL for mod_status based Apache monitoring to ${APACHE_INTERNALS_CONFIG_FILE}" >>/var/log/sailing.err
    echo "## SERVER STATUS" >>"${APACHE_INTERNALS_CONFIG_FILE}"
    echo "Use Status $INSTANCE_DNS internal-server-status" >>"${APACHE_INTERNALS_CONFIG_FILE}"
}

stop_httpd() {
	if [ -x /etc/init.d/httpd ]; then
		service httpd stop
		echo "Stopped httpd..." >>/var/log/sailing.err
	fi
}

# See how we were called.
case "$1" in
  start)
	start_servers
	/usr/sbin/update-motd
	touch /var/lock/subsys/sailing
    ;;
  stop)
	stop_servers
	rm -f /var/lock/subsys/sailing
	;;
  status)
	status java
	RETVAL=$?
	;;
  *)
    echo $"Usage: $0 {start|status|stop}"
    RETVAL=3
esac

exit $RETVAL
