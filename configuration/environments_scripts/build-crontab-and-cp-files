#!/bin/bash

# Purpose: The first parameter is an image type. This script iterates over the image types' USER folders, concatenating all the symbolic
# links (referencing locations within configuration/crontabs) into one file for each user. It also takes the name of the user containing a copy of the git repo
# as well as the name of the dir within that user to go to. The created files for each user go into that user's
# home dir and are installed for that user too. Within these crontab stubs, are certain string literals, which are replaced:
# PATH_OF_GIT_HOME_DIR_TO_REPLACE becomes the absolute path to the git home dir, and PATH_OF_HOME_DIR_TO_REPLACE is changed to the path of
# the home directory in which the crontab will be installed. 
# Useful files are also copied across from the "files" dir within each image type.
# Finally, the script ends by performing a deamon reload and reenabling all the systemd units so the correct wants, requires, etc. are installed/linked.

if [[ $# -lt 3 || $# -gt 5 ]]; then
    echo "$0 <ENVIRONMENT_TYPE> <USER_WITH_COPY_OF_REPO> <RELATIVE_PATH_OF_GIT_DIR_WITHIN_USER>  "
    echo ""
    echo "Where USER_WITH_COPY_OF_REPO is a user that contains a checked out copy of the main git."
    echo "And where RELATIVE_PATH_OF_GIT_DIR_WITHIN_USER is the path to the git repo from the USER_WITH_COPY_OF_REPO's home directory."
    echo "Use the s(imple) flag to only do the crontab and not copy any files across. The n(o install) flag can be used to setup the crontabs but not install them."
    exit 2
fi
INSTALL_CRONTAB="true"
options='sn'
while getopts $options option
do
    case $option in
        n) INSTALL_CRONTAB="false";;
        s) ONLY_CRONTAB="true";;
        \?) echo "Invalid option"
            exit 4;;
    esac
done
shift $((OPTIND-1)) # shift the arguments along so -s is no longer $1
ENV_TYPE="$1"
GIT_USER="$2"
RELATIVE_GIT_DIR_NAME="$3"
cd "$(dirname "$0")/${ENV_TYPE}"
if [[ -d "users" ]]; then
    cd "users"
    GIT_PATH="$(eval echo $(printf "~%q" "$GIT_USER"))/${RELATIVE_GIT_DIR_NAME}" # The path to the git repo that contains the files needed.
    for dir in $(ls -d */ ); do
        USERNAME=$(echo $dir | sed "s/\/$//") # Dirname is the username. The trailing slash is removed.
        HOME_DIR=$(eval echo $(printf "~%q" "$USERNAME"))   # The path to the home dir of the user whose cronjob will be installed.
        > $HOME_DIR/crontab
        for crontab in $(ls ${USERNAME}/crontab*); do
	    cat "${crontab}">> $HOME_DIR/crontab
        done
        sed -i "s|PATH_OF_GIT_HOME_DIR_TO_REPLACE|${GIT_PATH}|g" $HOME_DIR/crontab # Sets correct path to the git repo within the crontab.
        sed -i "s|PATH_OF_HOME_DIR_TO_REPLACE|${HOME_DIR}|g" $HOME_DIR/crontab # Sets the correct path to the home dir of the user whose crontab will be installed.
        echo "">>$HOME_DIR/crontab  # Adds a newline
        if [[ "$INSTALL_CRONTAB" == "true" ]]; then    
            crontab -u ${USERNAME} $HOME_DIR/crontab # Install the crontab in the given user's home dir.
        fi
    done
    cd .. # exits users folder, which is essential for the next commands
fi
if [[ "$ONLY_CRONTAB" != "true" && -d "files" ]]; then
    cd "files"
    \cp -rL * /   # copies all files accross, realising any symbolic links. The backslash escapes the alias cp -i.
fi

systemctl daemon-reload
systemctl reenable $(find /etc/systemd/system/ -type f) # to recreate all the dependency links.