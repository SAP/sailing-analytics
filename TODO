Axel
====

 - consider an array-based implementation of TrackImpl, sorted ascending by time point; inserting
   with a not-maximal time point requires some shifting but should be the rare exception in all our
   use cases.

 - allow for tail length customization

 - display advantage line in Google map

 - calculate wind based on boat angles: find two boats that are either both on an upwind
   or both on a downwind leg; then average their courses.

 - Need to adjust PartialNavigableSetView to work on any ordered sequential structure

 - Make threshold for track smoothening configurable. Currently, we have millisecondsOverWhichToAverage.
   This is also used as response to getMillisecondsOverWhichToAverageSpeed. Probably, we should at least
   additionally have a common way to eliminate impossible or highly unlikely fixes. This could rather be
   a configurable speed threshold. Once the outliers have been eliminated, smoothening in terms of
   weighted averaging around the time point requested should happen, based on an acceleration model
   that eventually could be specific to the boat class. The acceleration model would tell us how to,
   e.g., based on splines, interpolate and smoothen what remains from the fixes.

 - When a getTrackedRace(...) call is launched for an event/race where it becomes evident that
   the race won't show up (e.g., because the event is removed or no longer tracked), unblock
   any calls to TrackedEventImpl.getTrackedRace(...), e.g., by allowing for a check on the TrackedEvent
   that indicates that the race being waited for won't show up anymore.

 - Implement refined version of isValid in GPSFixMovingTrack taking into account the
   speed as contained by each individual fix

 - Finish a first draft version of a GWT admin UI

   * "top" display, with time slider
   * leaderboard page (scrollable!)
   * configure one or more leaderboards from a selection of races, adjustable delay per leaderboard
   * each leaderboard has its own URL
   * wind display
   * edit mode for disqualifications / net / total point adjustments
   * store net / total points separately in Mongo, making them overridable in editable copy of leaderboard
   * consider a per-user preferences page where leaderboard columns can be personalized at runtime
   * mark position entry capability, supporting "lost mark tracker" use case

 - Distribute wind data to their respective races; capture expedition wind not by race/event anymore because
   wind is already recorded by time and position; when seeking wind information, look for information
   closest in time/space; consider throwing NoWindException if certain thresholds are crossed

 - Launch Expedition wind capturing upon startup because it should no longer be event/race-specific

 - consolidate time point defaulting for servlet REST APIs

 - Now that we can update Course's waypoints, consider creating a RaceDefinition right upon
   receiving the Event/Race from TracTrac, using an empty list of waypoints. This may simplify
   the entire life cycle of RaceDefinition objects.

 - Improve Mongo-based tests by using Mongo transactions instead of waiting for prior transactions to complete


Simon
=====

+ Make "Stop" button work such that race and thread disappear from the Python runtime

+ Allow users to override net points / total points; enter disqualifications etc.

+ Leaderboard umbauen auf Timeslider support (dazu liefert Axel stabiles start und finsh)

+ Animation Mode (3 sekunden, ...)

+ Build wizard page for initial configuration

+ Wind expedition listener bei addrace automatisch konfigurieren
+ Wind tracking einschalten für prod für laufende Rennen
+ Einstellbar: Threads sofort starten (Wunsch: Checked=True)

+ Total Points einbauen

+ Wind sofort anzeigen

+ Current Race speichern damit iPhone das nutzen kann
+ iPhone UI implementieren
